<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">
    <!--配置spring安全认证服务-->

    <!--配置不过滤的资源（静态资源和与登陆相关的资源）-->
    <!--security:安全，配置none不过滤，pattern：资源路径-->
    <security:http security="none" pattern="/login.jsp"/>
    <security:http security="none" pattern="/failer.jsp"/>
    <!--因为下面配置了默认目标路径为index.jsp,所以服务器一启动就会打开index页面，这时必须放开index页面，不然服务器一启动
    就会报accessExecution-->
    <security:http security="none" pattern="/index.jsp"/>
    <security:http security="none" pattern="/main.jsp"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/plugins/**"/>
    <security:http security="none" pattern="/captcha/image"/>
    <security:http security="none" pattern="/user/login"/>


    <!-- 配置哪些请求URL需要拦截 -->
    <!--设置认证器入口为自己的beanauthenticationEntryPoint-->
    <security:http auto-config="false"  use-expressions="true">
        <!--配置自动登陆,cookie会存储7天-->
        <security:remember-me remember-me-parameter="remember-me" token-repository-ref="jdbcTokenRepository"
                              token-validity-seconds="604800"/>
        <!--<security:intercept-url pattern="/user/login" access="permitAll"/>-->
        <!-- 配置剩余的请求URL需要拦截，先登录，再获取角色 ROLE_* -->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
        <!-- 配置表单登录
            登录成功后重定向
            default-target-url
            always-use-default-target
       -->
        <security:form-login
                login-page="/login.jsp"
                default-target-url="/main.jsp"
                always-use-default-target="true"
                authentication-failure-url="/failer.jsp"
                authentication-success-forward-url="/pages/main.jsp"/>

        <!-- 关闭跨站点请求伪造 -->
        <security:csrf disabled="true"/>

        <!--&lt;!&ndash; 配置请求头 &ndash;&gt;-->
        <!--<security:headers>-->
            <!--&lt;!&ndash; 配置同一个域名下，可以访问iframe子窗口 SAMEORIGIN same origin&ndash;&gt;-->
            <!--<security:frame-options policy="SAMEORIGIN"/>-->
        <!--</security:headers>-->

        <!-- 配置退出 -->
        <security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp"/>
    </security:http>

    <!-- 配置认证入口 -->
    <bean id="authenticationEntryPoint"
          class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <!-- 配置认证处理请求地址 -->
        <constructor-arg value="/user/login"/>
    </bean>

    <!-- ########## 配置身份认证管理器 ########### -->
    <!-- 配置认证管理器 -->
    <security:authentication-manager id="authenticationManager">
        <!-- 配置认证提供者 -->
        <security:authentication-provider user-service-ref="userService">
            <!-- 设置加密方式 -->
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 配置密码加密 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <bean id="jdbcTokenRepository"
          class="org.springframework.security.web.authentication.rememberme.JdbcTokenRepositoryImpl">
        <property name="dataSource" ref="dataSource"/>
        <!--第一次使用自动生成固定PERSISTENT_LOGINS表保存记录，如果哦已经有此表则不能再配置此项-->
        <!--<property name="createTableOnStartup" value="true"/>-->
    </bean>

</beans>
